{"version":3,"file":"perspectives-pageworker.js","sources":["../src/perspectives-pageworker.js"],"sourcesContent":["// BEGIN LICENSE\n// Perspectives Distributed Runtime\n// Copyright (C) 2019 Joop Ringelberg (joopringelberg@perspect.it), Cor Baars\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n//\n// Full text of this license can be found in the LICENSE file in the projects root.\n// END LICENSE\n\n// Notice that even though the method name \"postMessage\" equals that of Window.postMessage, here we deal\n// with MessagePort.postMessage and ServiceWorker.postMessage. These methods have a different interface.\n// See:\n// https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage\n// https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/postMessage\n// https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/postMessage\n\n////////////////////////////////////////////////////////////////////////////////\n//// STORING PORTS SENT BY CLIENT PAGES\n////////////////////////////////////////////////////////////////////////////////\n// An array of MessageChannel ports.\nconst channels = {};\nlet channelIndex = 1;\n\n////////////////////////////////////////////////////////////////////////////////\n//// PORT TO PAGE THAT HOSTS PDR\n//// RECEIVE PORTS FROM CLIENTS WHEN RUN IN THE MAIN PAGE, RELAYED THROUGH A SERVICE WORKER\n//// This function is passed on by the client in the call configurePDRProxy({pageHostingPDRPort: pageHostingPDRPort})\n//// This function returns a MessagePort as documented here: https://developer.mozilla.org/en-US/docs/Web/API/MessagePort.\n////////////////////////////////////////////////////////////////////////////////\nexport default function pageHostingPDRPort(pdr) {\n  // Create a channel.\n  const channel = new MessageChannel();\n  let weHost = false;\n  let portTransferred = false;\n\n  \n  if ('serviceWorker' in navigator) {\n    // This assumes perspectives-serviceworker is already registered with scope './'\n    navigator.serviceWorker.ready.then(function(registration) {\n\n        function sendPortToController() {\n          // Only send if we have a controller\n          if (navigator.serviceWorker.controller && !portTransferred) {\n            console.log(\"Pageworker: sending port to controller\");\n            navigator.serviceWorker.controller.postMessage({ messageType: \"relayPort\", port: channel.port2 }, [channel.port2]);\n            portTransferred = true;\n          } else {\n            console.log(\"Pageworker: no controller available yet\");\n          }\n        }\n     \n      // Always use the active worker from the existing registration\n      let serviceWorker = registration.active;\n      if (serviceWorker) {\n        console.log(\"Pageworker: using existing service worker\");\n        sendPortToController();\n      } else {\n        console.log(\"Pageworker: waiting for service worker to activate\");\n        // Wait for the service worker to be ready\n        navigator.serviceWorker.addEventListener(\"controllerchange\", () => {\n          console.log(\"Pageworker: controller change detected, sending port\");\n          sendPortToController();\n        });\n      }\n      // Listen to messages coming in from the serviceWorker. The serviceWorker is the central hub that passes messages\n      // between the page hosting the PDR and the other pages.\n      // Notice that all pages that are not the first will never handle a message.\n      // Notice that this handler is on the ServiceWorkerContainer of EACH PAGE; NOT IN THE SERVICEWORKER ITSELF!\n\n      // Notice that this listener is just used to shuffle ports between pages.\n      // We establish a connection between the page that hosts the PDR and the page that\n      // wants to use the PDR. That connection is a 'channel'.\n      // It consists of two ports. One port is sent by the page that wants to use de PDR.\n      // It is received and used by the page that hosts the PDR.\n      // The other port is used by the page that wants to use the PDR.\n      // Corrolary: this listener has nothing to do with Perspectives calls that are passed \n      // from client pages to the PDR!\n      navigator.serviceWorker.addEventListener('message', function (event) {\n        switch (event.data.messageType) {\n          case \"youHost\":\n            const hostingPage = event.data.port;\n            hostingPage.start();\n            // This message only arrives to the very first page visiting InPlace.\n            // This page must host the PDR.\n            weHost = true;\n            // We've sent ourselves a port.\n            channels[channelIndex] = hostingPage;\n            // Return the channelIndex.\n            console.log(\"Pageworker: we host the PDR. We send channelId to the page that hosts the PDR.\")\n            channels[channelIndex].postMessage({ responseType: \"WorkerResponse\", serviceWorkerMessage: \"channelId\", channelId: 1000000 * channelIndex });\n            // start listening to the new channel, handle requests.\n            // The page that has sent the port will send WorkerResponse messages and API calls\n            hostingPage.onmessage = request => pdr.handleClientRequest(pdr, channels, request, 1000000 * channelIndex);\n            // increment the index so we're ready for the next page that connects.\n            channelIndex = channelIndex + 1;\n            break;\n          case \"relayPort\":\n            // If we are the host, save the port; otherwise ignore.\n            if (weHost) {\n              // Notice how this section is exactly the same as the one in the onconnect handler of the SharedWorker.\n              const connectionToAPage = event.data.port;\n              connectionToAPage.start();\n              // the new client (page) sends a port. This is a MessagePort.\n              channels[channelIndex] = connectionToAPage;\n              // Return the channelIndex.\n              console.log(\"Pageworker: we are not the host. We send channelId to the page that wants to use the PDR.\")\n              channels[channelIndex].postMessage({ responseType: \"WorkerResponse\", serviceWorkerMessage: \"channelId\", channelId: 1000000 * channelIndex });\n              // start listening to the new channel, handle requests.\n              connectionToAPage.onmessage = request => pdr.handleClientRequest(pdr, channels, request, 1000000 * channelIndex);\n              // increment the index so we're ready for the next page that connects.\n              channelIndex = channelIndex + 1;\n            }\n            break;\n        }\n      });\n    }).catch(function (error) {\n        // Something went wrong during registration. The service-worker.js file\n        // might be unavailable or contain a syntax error.\n        console.log(\"Error using perspectives-service worker for port relay in page setup\", error);\n      });\n  }\n  else {\n    console.log(\"This browser does not support service workers.\");\n  }\n  // Use port1 in the SharedWorkerChannel.\n  return channel.port1;\n}\n"],"names":["channels","channelIndex","pageHostingPDRPort","pdr","channel","MessageChannel","weHost","portTransferred","navigator","serviceWorker","ready","then","registration","sendPortToController","controller","console","log","postMessage","messageType","port","port2","active","addEventListener","event","data","hostingPage","start","responseType","serviceWorkerMessage","channelId","onmessage","request","handleClientRequest","connectionToAPage","error","port1"],"mappings":"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"}